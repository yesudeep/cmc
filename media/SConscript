#!/usr/bin/env python
# -*- coding: utf-8 -*-

Import('env')

from util import match_patterns, minifiables, filter_files
from fnmatch import fnmatch
from os.path import basename
from filesystem import walk_dir

SRC_DIR = './'
DEST_DIR = '../' + env['MEDIA_DEST_DIR'] + '/'

LOADER_SCRIPT = SRC_DIR + "script/lib/chickoojs/src/loader.js"
DEFAULT_MEDIA_URL = "{{ TEXT_MEDIA_URL }}"
JS_MINIFIED = "-min"

'''
script/lib/chickoojs/src/jquery/tweet/tweet/jquery.tweet.js
script/lib/chickoojs/src/jquery/qtip/1.0.0-rc3/jquery.qtip.js


script/lib/chickoojs/src/jquery/tools/tools.overlay-1.0.4.js
script/lib/chickoojs/src/jquery/form/jquery.form.js
script/lib/chickoojs/src/jquery/metadata/jquery.metadata.js
script/lib/chickoojs/src/jquery/validate/jquery.validate.js
script/lib/chickoojs/src/jquery/validate/jquery.validate.extra.js
script/lib/chickoojs/src/jquery/alphanumeric/jquery.alphanumeric.js
script/lib/chickoojs/src/titleCaps.js
script/what.js
script/index.js
script/base.js
script/start.js
script/form.js

'''

SCRIPT_FILES = Split("""
    script/lib/chickoojs/src/jquery/jquery-1.3.2.js
    script/lib/chickoojs/src/jquery/jquery-1.4a1.min.js
    script/lib/chickoojs/src/jquery/jquery-1.4.min.js
    script/lib/chickoojs/src/jquery/tools/1.1.2/jquery.tools.min.js
    script/jquery.openid.js
""")

IMAGE_FILES = Split("""
    image/logo/en_US/text.png
    image/logo/favicon.png

    image/heading/im_writing_a_book_about_you.png
    image/heading/who_is_this_chap.png
    image/heading/what_is_cutting_masala_chai.png
    image/heading/why_cutting_masala_chai.png

    image/picture/author.jpg
    image/picture/dance.jpg
    image/picture/tajmahal.jpg
    image/picture/two_friends.jpg
    image/picture/age.jpg
    image/picture/margao.jpg

    image/icon/goldkey.png
    image/icon/license.png
    image/icon/crumpled/64x64/gmail.png
    image/icon/crumpled/64x64/twitter.png
    image/icon/crumpled/64x64/orkut.png
    image/icon/crumpled/64x64/facebook.png
    image/icon/crumpled/64x64/gmail-envelope.png
    image/icon/crumpled/128x128/gmail.png
    image/icon/crumpled/64x64/feed.png
    image/icon/crumpled/64x64/broadcast.png
    image/icon/crumpled/64x64/thumbs-down.png
    image/icon/crumpled/64x64/thumbs-up.png
    image/icon/crumpled/48x48/thumbs_down.png
    image/icon/crumpled/48x48/thumbs_up.png
    image/icon/spinner.gif
    image/icon/book.png
    image/icon/goodies.png
    image/icon/notepad.png
    image/icon/register.png
    image/icon/sign_board.png
    image/icon/author.png
    
    
    image/icon/openid/aolW.png
    image/icon/openid/blogger.png
    image/icon/openid/claimid.png
    image/icon/openid/facebookW.png
    image/icon/openid/fadegrey.png
    image/icon/openid/flickr.png
    image/icon/openid/flickrW.png
    image/icon/openid/googleW.png
    image/icon/openid/livejournal.png
    image/icon/openid/myopenid.png
    image/icon/openid/myopenidW.png
    image/icon/openid/myspaceW.png
    image/icon/openid/openidW.png
    image/icon/openid/openidico.png
    image/icon/openid/technorati.png
    image/icon/openid/verisign.png
    image/icon/openid/vidoop.png
    image/icon/openid/wordpress.png
    image/icon/openid/yahooW.png
    
    image/bg/blockquote.png
    image/bg/button_overlay.png
    image/bg/letter_collage.jpg
    image/bg/people_collage.jpg
    image/bg/sky.jpg
    image/bg/home.jpg
    image/bg/texture.jpg
    image/bg/textfield_normal.png
    image/bg/textfield_readonly.png
    image/bg/do_you_like_title.png
    image/bg/navigation.png
    image/bg/friends.jpg
    image/bg/teastall.png
    image/bg/what_why.jpg  

    image/download/email_signature1.png
    image/download/email_signature2.png
    image/download/email_signature3.png
    image/download/email_signature4.png
    image/download/home.jpg
    image/download/about_the_author.jpg
    image/download/tell_me_your_story.jpg
    image/download/what_and_why.jpg
    image/download/home_thumb.jpg
    image/download/about_the_author_thumb.jpg
    image/download/tell_me_your_story_thumb.jpg
    image/download/what_and_why_thumb.jpg
    
    image/fancybox/fancy_progress.png
""")

CSS_FILES = Split("""
    css/screen.css
    css/openid.css
""")

# Do not include IMAGE files in here.
# Please include them in IMAGE_FILES above.
# If you would like images to be copied "as is" without
# any optimizations, then you may include them here.
PLAIN_COPIES = SCRIPT_FILES + CSS_FILES + Split("""
    robots.txt
    html/facebook/xd_receiver.html
""")

PLAIN_COPY_DIRECTORIES = Split("""

""")

STITCHED_IMAGES = [
    dict(
        target='image/icon/crumpled/64x64/icon-set.png',
        sources=Split("""
        image/icon/crumpled/64x64/twitter-box.png
        image/icon/crumpled/64x64/orkut.png
        image/icon/crumpled/64x64/facebook-box.png
        image/icon/crumpled/64x64/gmail-envelope.png
        image/icon/crumpled/64x64/feed.png
        image/icon/crumpled/64x64/broadcast.png
        image/icon/crumpled/64x64/thumbs-up.png
        image/icon/crumpled/64x64/thumbs-down.png
        """),
        orientation='horizontal',
        ),
    dict(
        target='image/icon/navicon.png',
        sources=Split("""
        image/icon/what_why.png
        image/icon/notepad.png
        image/icon/goodies.png
        image/icon/sign_board.png
        image/icon/author.png
        image/icon/register.png
        """),
        orientation='horizontal',
        ),
    dict(
        target='image/fancybox/fancybox.png',
        sources=Split("""
        script/lib/chickoojs/src/jquery/fancybox/1.3.0b/fancy_closebox.png
        script/lib/chickoojs/src/jquery/fancybox/1.3.0b/fancy_title_left.png
        script/lib/chickoojs/src/jquery/fancybox/1.3.0b/fancy_title_main.png
        script/lib/chickoojs/src/jquery/fancybox/1.3.0b/fancy_title_right.png
        script/lib/chickoojs/src/jquery/fancybox/1.3.0b/fancybox_left.png
        script/lib/chickoojs/src/jquery/fancybox/1.3.0b/fancybox_right.png
        """),
        orientation='vertical',
        ),
]

COMMON_SCRIPTS = """
    script/base.js
"""

SCRIPT_BUNDLES = (
    dict(
        selector="index.js",
        sources = Split(
        COMMON_SCRIPTS + 
        """
            script/lib/chickoojs/src/jquery/tweet/tweet/jquery.tweet.js
            script/index.js
        """)
    ),
    dict(
        selector="celebrity.js",
        sources = Split(
        """
            script/lib/chickoojs/src/jquery/tagcloud-2/jquery.tagcloud-2.js
            script/celebrity.js
        """
        )
    ),
)

'''
page_index_js = env.Concatenate([DEST_DIR + 'script/page/index.js'], [SRC_DIR + f for f in Split("""
    script/lib/chickoojs/src/jquery/tweet/tweet/jquery.tweet.js
    script/index.js
""")])
env.YuiCompressorMinify(page_index_js)


#    script/lib/chickoojs/src/jquery/fancybox/1.2.6/jquery.fancybox-1.2.6.js
page_base_js = env.Concatenate([DEST_DIR + 'script/page/base.js'], [SRC_DIR + f for f in Split("""
    script/lib/chickoojs/src/jquery/fancybox/1.3.0b/jquery.fancybox.js
    script/lib/chickoojs/src/jquery/kwicks/1.5.1/js/jquery.kwicks-1.5.1.js
    script/lib/chickoojs/src/jquery/form/jquery.form.js
    script/lib/chickoojs/src/jquery/metadata/jquery.metadata.js
    script/lib/chickoojs/src/jquery/validate/jquery.validate.js
    script/lib/chickoojs/src/jquery/validate/jquery.validate.extra.js
    script/lib/chickoojs/src/jquery/alphanumeric/jquery.alphanumeric.js
    script/lib/chickoojs/src/titleCaps.js
    script/base.js
    script/form.js
    """)])
env.YuiCompressorMinify(page_base_js)
#env.JsminMinify(page_base_js)

page_what_js = env.Concatenate([DEST_DIR + 'script/page/what.js'], [SRC_DIR + f for f in Split("""
    script/what.js
""")])
env.YuiCompressorMinify(page_what_js)

env.YuiCompressorMinify(env.Concatenate([DEST_DIR + 'script/page/start.js'], [SRC_DIR + f for f in Split("""
    script/start.js
""")]))

env.YuiCompressorMinify(env.Concatenate([DEST_DIR + 'css/screen-all.css'], [SRC_DIR + f for f in Split("""
    css/screen.css
    css/fancybox.css
""")]))
'''

CSS_BUNDLES = (
    dict(
        target="css/screen-all.css",
        sources = Split("""
            css/screen.css
        """)
    ),
)

# Recursively add all the files in the directories to files to copy.
for directory in set(PLAIN_COPY_DIRECTORIES):
    files = [f[len(SRC_DIR):] for f in walk_dir(SRC_DIR + directory)]
    PLAIN_COPIES.extend(files)

# Plain copies.
for f in set(PLAIN_COPIES):
    env.Command(DEST_DIR + f, SRC_DIR + f, Copy("$TARGET", "$SOURCE"))

# Optimize graphics
for f in IMAGE_FILES:
    filename = str(f)
    if match_patterns(filename, patterns=['*.png']):
        env.OptimizePNG(DEST_DIR + f, SRC_DIR + f)
    elif match_patterns(filename, patterns=['*.jpg', '*.jpeg']):
        env.OptimizeJPEG(DEST_DIR + f, SRC_DIR + f)
    else:
        env.Command(DEST_DIR + f, SRC_DIR + f, Copy("$TARGET", "$SOURCE"))


# Stitching graphics together


for stitch in STITCHED_IMAGES:
    func = env.HStitchImages if stitch.get('orientation', 'horizontal') == 'horizontal' else env.VStitchImages
    func(DEST_DIR + stitch['target'], [SRC_DIR + f for f in stitch['sources']])

# Minification of the generated CSS and JS files.
MINIFIABLE_FILES = SCRIPT_FILES + CSS_FILES + Split("""

""")

# Exclude these files specifically from minification.
NON_MINIFIABLE_FILES = Split("""

""")


# Don't minify all files in one command.  Minify them separately.
# It keeps build times small.
for f in minifiables(MINIFIABLE_FILES, NON_MINIFIABLE_FILES):
    filepath = DEST_DIR + str(f)
    env.YuiCompressorMinify(filepath)
    #if fnmatch(basename(filepath), '*.js'):
    #    env.JsminMinify(filepath)



def generate_perfectly_cacheable_scripts(sources, selector, media_url, page_dir, dest_dir, loader_script, minified):
    import os
    import errno
    import hashlib
    try:
        from cStringIO import StringIO
    except ImportError:
        from StringIO import StringIO

    def mkdir_p(path):
        try:
            os.makedirs(path)
        except OSError, exc:
            if exc.errno == errno.EEXIST:
                pass
            else: raise

    string_file = StringIO()
    chunk_size = 2048
    hash_service = hashlib.sha1()

    for filepath in sources:
        try:
            file_handle = open(filepath, 'rb')
            bytes_read = True
            while bytes_read:
                chunk = file_handle.read(chunk_size)
                bytes_read = len(chunk)
                string_file.write(chunk)
                hash_service.update(chunk)
        except IOError, message:
            print "Error: could not open file `%s' for reading -- permission denied or input/output error" % (filepath,)    
    file_digest = hash_service.hexdigest()
    mkdir_p(dest_dir)
    output_filename = dest_dir + file_digest + ".js"
    if not os.path.exists(output_filename):
        try:
            f = open(output_filename, 'w')
            f.write(string_file.getvalue())
            f.close()
            string_file.close()
        except IOError, message:
            print message
            print "Error: could not open file `%s' for writing -- permission denied or input/output error" % (output_filename,)    

    #loader = """function getScript(src){var doc=document,s=doc.createElement('script');s.src=src;s.setAttribute('async','true');doc.documentElement.firstChild.appendChild(s);}(function(ss){for (var i = 0,len = ss.length;i<len;i++){getScript(ss[i]);}})(window.__hc_scripts);"""

    selector_script_contents = """var js = {'all': '%(media_url)s%(page_dir)s%(digest)s%(minified)s.js'};
        window.__hc_scripts.push(js['all']);getScripts(window.__hc_scripts);%(loader_script)s
        """.strip()
    #selector_script_contents = """var js = {'all': '%(media_url)s%(page_dir)s%(digest)s%(minified)s.js'};
    #    window.__hc_scripts.push(js['all']);%(loader_script)s
    #    """.strip()


    selector_script_contents = selector_script_contents % dict(
        digest=file_digest,
        loader_script=open(loader_script, 'r').read(),
        #loader_script=loader,
        page_dir=page_dir,
        media_url=media_url,
        minified=minified)

    selector_script_contents = selector_script_contents.strip()

    f = open(selector, 'wb')
    f.write(selector_script_contents)
    f.close()

    return output_filename

# Page based resource bundles.
for bundle in SCRIPT_BUNDLES:
    #env.YuiCompressorMinify(env.Concatenate([DEST_DIR + bundle['target']], 
    #    [SRC_DIR + f for f in bundle['sources']]))
    #env.Concatenate([DEST_DIR + bundle['target']])

    page_dir = bundle.get("page_dir", "script/page/")
    dest_dir = DEST_DIR + page_dir
    selector = dest_dir + bundle["selector"]    
    output_filename = generate_perfectly_cacheable_scripts(
        sources=[SRC_DIR + f for f in bundle['sources']],
        selector=selector,
        media_url=DEFAULT_MEDIA_URL,
        page_dir=page_dir,
        dest_dir=dest_dir,
        loader_script=LOADER_SCRIPT,
        minified=JS_MINIFIED)

    env.YuiCompressorMinify(selector)
    env.YuiCompressorMinify(output_filename)

# Page based resource bundles.
for bundle in CSS_BUNDLES:
    env.YuiCompressorMinify(env.Concatenate([DEST_DIR + bundle['target']], 
        [SRC_DIR + f for f in bundle['sources']]))
